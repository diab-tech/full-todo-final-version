import { useMutation, useQueryClient } from "@tanstack/react-query";
import { updateTodoAction } from "@/actions/todoActions";

export function useUpdateTodo() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateTodoAction, // ุฏู ุงููุงููุดู ุงููู ุจุชุจุนุช ุงูู API
    // ๐ฅ ุฏู ุจูู ุทุฑููุฉ optimistic update
    onMutate: async (newTodo) => {
      // 1. ููู ุฃู fetch ุดุบุงู ูุชุงุณูุงุช ูุนููุฉ
      await queryClient.cancelQueries({ queryKey: ['todos'] });

      // 2. ุงุญูุธ ูุณุฎุฉ ูุฏููุฉ ููู rollback
      const previousTodos = queryClient.getQueryData(['todos']);

      // 3. ุนุฏู ุงูุชุงุณูุงุช ูู ุงูู cache ูุจุงุดุฑุฉ
      queryClient.setQueryData(['todos'], (old: any) => {
        return old?.map((todo: any) =>
          todo.id === newTodo.id ? { ...todo, ...newTodo } : todo
        );
      });

      // 4. ุฑุฌุน ุงููุณุฎุฉ ุงููุฏููุฉ ุนุดุงู ูู ุญุจููุง ูุฑุฌุนูุง ูู ุญุตู error
      return { previousTodos };
    },
    onError: (err, newTodo, context) => {
      // ุญุตู ุฎุทุฃุ ุฑุฌุน ุงููุณุฎุฉ ุงููุฏููุฉ
      queryClient.setQueryData(['todos'], context?.previousTodos);
    },
    onSettled: () => {
      // ุจุนุฏ ูุง ุชุฎูุต (ุณูุงุก ูุฌุญุช ุฃู ูุดูุช)ุ ุงุนูู refetch ููู data ูู ุงูุณูุฑูุฑ
      queryClient.invalidateQueries({ queryKey: ['todos'] });
    },
  });
}
